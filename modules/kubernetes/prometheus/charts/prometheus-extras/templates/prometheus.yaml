apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: xks
  labels:
    {{- include "prometheus-extras.labels" . | nindent 4 }}
spec:
  version: v2.40.1
  scrapeInterval: "1m"
  {{- if eq .Values.cloudProvider "azure" }}
  podMetadata:
    labels:
      aadpodidbinding: prometheus
  {{- end }}
  containers:
    - name: prometheus
      args:
        - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
        - --storage.agent.path=/prometheus
        - --enable-feature=agent
        - --web.enable-lifecycle
        - --web.console.templates=/etc/prometheus/consoles
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.route-prefix=/
        - --web.config.file=/etc/prometheus/web_config/web-config.yaml
  enableFeatures:
    - agent
  externalLabels:
    cluster_name: {{ .Values.externalLabels.clusterName }}
    environment: {{ .Values.externalLabels.environment }}
    region: {{ .Values.externalLabels.region }}
    {{- if .Values.externalLabels.tenantId }}
    tenant_id: {{ .Values.externalLabels.tenantId }}
    {{- end }}
  replicas: {{ .Values.replicaCount }}
  priorityClassName: "platform-medium"
  serviceAccountName: {{ .Values.serviceAccount.name }}
  {{- with .Values.prometheus.resourceSelector }}
  serviceMonitorSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.prometheus.namespaceSelector }}
  serviceMonitorNamespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.prometheus.resourceSelector }}
  probeSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.prometheus.namespaceSelector }}
  probeNamespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.prometheus.resourceSelector }}
  podMonitorSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.prometheus.namespaceSelector }}
  podMonitorNamespaceSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  remoteWrite:
    - name: thanos
      url: {{ .Values.remoteWrite.url }}
      {{- with .Values.remoteWrite.headers }}
      headers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # Setting according to others observation
      # https://github.com/prometheus/prometheus/pull/9634
      # Check docs for more information about settings
      # https://prometheus.io/docs/practices/remote_write/
      queueConfig:
        capacity: 2500
        maxBackoff: 5s
        maxSamplesPerSend: 500
        maxShards: 50
      {{- if .Values.remoteWrite.authenticated }}
      tlsConfig:
        certFile: /mnt/tls/tls.crt
        keyFile: /mnt/tls/tls.key
      {{- end }}

  resources:
    {{- toYaml .Values.resources | nindent 4 }}
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: {{ .Values.volumeClaim.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.volumeClaim.size }}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: prometheus
                  operator: In
                  values:
                    - xks
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: prometheus
                  operator: In
                  values:
                    - xks
            topologyKey: topology.kubernetes.io/zone
          weight: 100
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  {{- if .Values.remoteWrite.authenticated }}
  volumeMounts:
    - mountPath: /mnt/secrets-store
      name: secrets-store
    - name: tls
      mountPath: "/mnt/tls"
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: prometheus
    - name: tls
      secret:
        secretName: {{ .Values.secretName }}
  {{- end }}
